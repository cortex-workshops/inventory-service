name: Simulate User Activity (Platform - Inventory Service)

on:
  schedule:
    - cron: "25 14,16,18 * * 1-5"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  simulate:
    runs-on: ubuntu-latest

    env:
      ACTORS: |
        [
          {"username":"jeff","git_name":"Jeff Schnitter","git_email":"jeff@cortex.io","pat_secret":"PAT_JEFF"},
          {"username":"steph","git_name":"Steph","git_email":"steph@cortex.io","pat_secret":"PAT_STEPH"},
          {"username":"taylor","git_name":"Taylor Schmidt","git_email":"taylor@cortex.io","pat_secret":"PAT_TAYLOR"}
        ]
      REVIEWER_CANDIDATES: |
        ["PAT_TAYLOR","PAT_CATHLEEN","PAT_SALLY","PAT_JEFF","PAT_STEPH","PAT_CHASE","PAT_MARION","PAT_ROSHNI","PAT_GIANPAUL"]

    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update -y && sudo apt-get install -y jq
      - id: pick
        run: |
          len=$(jq 'length' <<< "${ACTORS}"); [ "$len" -eq 0 ] && echo "chosen=" >> $GITHUB_OUTPUT && exit 0
          idx=$((RANDOM % len)); obj=$(jq -r ".[$idx]" <<< "${ACTORS}")
          echo "username=$(jq -r '.username' <<< "$obj")" >> $GITHUB_OUTPUT
          echo "git_name=$(jq -r '.git_name' <<< "$obj")" >> $GITHUB_OUTPUT
          echo "git_email=$(jq -r '.git_email' <<< "$obj")" >> $GITHUB_OUTPUT
          echo "pat_secret=$(jq -r '.pat_secret' <<< "$obj")" >> $GITHUB_OUTPUT
      - id: auth
        run: |
          [ -z "${{ steps.pick.outputs.pat_secret }}" ] && echo "skip=true" >> $GITHUB_OUTPUT && exit 0
          TOKEN="${{ secrets[steps.pick.outputs.pat_secret] }}"; [ -z "$TOKEN" ] && echo "skip=true" >> $GITHUB_OUTPUT && exit 0
          echo "$TOKEN" | gh auth login --with-token
          echo "GH_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "AUTHOR=${{ steps.pick.outputs.git_name }}" >> $GITHUB_ENV
          echo "EMAIL=${{ steps.pick.outputs.git_email }}" >> $GITHUB_ENV
          echo "BRANCH=sim/${{ steps.pick.outputs.username }}-$(date +%s)" >> $GITHUB_ENV
      - if: steps.auth.outputs.skip == 'true'
        run: echo "No valid actor token; ending run."
      - id: scenario
        if: steps.auth.outputs.skip != 'true'
        run: |
          scenarios=("OPEN_ONLY" "COMMENT_REVIEW" "APPROVE" "MERGE" "CLOSE_UNMERGED" "BIG_DIFF" "SMALL_DIFF"); weights=(4 3 2 2 1 1 2)
          total=0; for w in "${weights[@]}"; do total=$((total+w)); done
          r=$((RANDOM % total)); acc=0; for i in "${!scenarios[@]}"; do acc=$((acc+weights[i])); if [ $r -lt $acc ]; then echo "value=${scenarios[i]}" >> $GITHUB_OUTPUT; break; fi; done
      - if: steps.auth.outputs.skip != 'true'
        run: |
          git config user.name "$AUTHOR"; git config user.email "$EMAIL"
          if [ $((RANDOM % 10)) -lt 3 ]; then existing=$(git ls-remote --heads origin "sim/${{ steps.pick.outputs.username }}-*" | head -n1 | awk '{print $2}' | cut -d/ -f3-); if [ -n "$existing" ]; then git fetch origin "$existing"; git checkout -b "$existing" "origin/$existing"; echo "BRANCH=$existing" >> $GITHUB_ENV; else git checkout -b "$BRANCH"; fi; else git checkout -b "$BRANCH"; fi
          touch README.md; mkdir -p changelogs
          if [ "${{ steps.scenario.outputs.value }}" = "BIG_DIFF" ]; then f="changelogs/${{ steps.pick.outputs.username }}-$(date +%s).md"; for i in $(seq 1 $((150 + RANDOM % 350))); do echo "- change $i at $(date -u)"; done > "$f"; else echo "Update by $AUTHOR at $(date -u)" >> README.md; if [ $((RANDOM % 6)) -eq 0 ] && [ -f "changelogs/old-${{ steps.pick.outputs.username }}.md" ]; then git rm -f "changelogs/old-${{ steps.pick.outputs.username }}.md" || true; fi; fi
          git add -A; git commit -m "feat: sim update by $AUTHOR at $(date -u)"; git push -u origin "$BRANCH"
      - id: openpr
        if: steps.auth.outputs.skip != 'true'
        run: |
          if [ $((RANDOM % 10)) -lt 7 ]; then URL=$(gh pr create --title "Sim PR by $AUTHOR" --body "Automated demo PR at $(date -u). Scenario: ${{ steps.scenario.outputs.value }}" --base main --head "$BRANCH" --draft=false || true); echo "url=$URL" >> $GITHUB_OUTPUT; fi
      - id: pr
        if: steps.auth.outputs.skip != 'true'
        run: |
          if [ -n "${{ steps.openpr.outputs.url }}" ]; then NUM=$(gh pr view "${{ steps.openpr.outputs.url }}" --json number -q .number); else NUM=$(gh pr list --state open --author "$AUTHOR" --json number,createdAt -q 'sort_by(.createdAt) | .[0].number'); fi
          [ "$NUM" = "null" ] || [ -z "$NUM" ] && echo "number=" >> $GITHUB_OUTPUT || echo "number=$NUM" >> $GITHUB_OUTPUT
      - if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        run: |
          if [ $((RANDOM % 2)) -eq 0 ]; then gh pr comment ${{ steps.pr.outputs.number }} --body "General comment by $AUTHOR at $(date -u)"; fi
      - id: pick_reviewer
